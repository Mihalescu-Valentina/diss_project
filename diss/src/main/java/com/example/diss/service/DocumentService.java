package com.example.diss.service;

import com.example.diss.model.Document;
import com.example.diss.model.Tag;
import com.example.diss.model.User;
import com.example.diss.repository.DocumentRepository;
import com.example.diss.repository.TagRepository;
import com.example.diss.repository.UserRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;

@Service
public class DocumentService {

    @Value("${file.upload-dir}")
    private String uploadDir;

    @Autowired
    private DocumentRepository documentRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private TagRepository tagRepository;

    @Autowired
    private FileTextExtractor fileTextExtractor;

    // List of supported file types
    private static final Set<String> ALLOWED_FILE_TYPES = Set.of(
            "application/pdf",
            "application/msword",             // .doc
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document", // .docx
            "text/plain",                     // .txt
            "image/png",
            "image/jpeg",
            "video/mp4",
            "video/quicktime",                // .mov
            "video/x-msvideo"                 // .avi
    );

    // List of supported file types for text content extraction
    private static final Set<String> TEXT_BASED_FILE_TYPES = Set.of(
            "application/pdf",
            "application/msword", // .doc
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document", // .docx
            "text/plain" // .txt
    );

    public Document uploadDocument(Long userId, String title, String description, MultipartFile file, List<String> tagNames) throws IOException {
        // Validate file type
        String fileType = file.getContentType();
        if (!ALLOWED_FILE_TYPES.contains(fileType)) {
            throw new IllegalArgumentException("Unsupported file type. Please upload a PDF, PNG, JPEG, or MP4.");
        }

        // Ensure the upload directory exists
        if (!Files.exists(Paths.get(uploadDir))) {
            Files.createDirectories(Paths.get(uploadDir));
        }

        // Generate a unique filename
        String originalFilename = file.getOriginalFilename();
        String uniqueFilename = UUID.randomUUID() + "_" + originalFilename;
        Path filePath = Paths.get(uploadDir, uniqueFilename);
        Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

        // Extract text if applicable
        String extractedText = null;
        if (TEXT_BASED_FILE_TYPES.contains(fileType)) {
            try {
                extractedText = fileTextExtractor.extractText(file);
            } catch (Exception ignored) {
            }
        }

        // Handle tags
        Set<Tag> tags = new HashSet<>();
        for (String tagName : tagNames) {
            Tag tag = tagRepository.findByNameIgnoreCase(tagName)
                    .orElseGet(() -> {
                        Tag newTag = new Tag(); // Use no-args constructor generated by Lombok
                        newTag.setName(tagName); // Set the tag name using the setter
                        return tagRepository.save(newTag);
                    });
            tags.add(tag);
        }

        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User with ID " + userId + " not found."));

        // Create and save the document
        Document doc = new Document();
        doc.setTitle(title);
        doc.setDescription(description);
        doc.setFilePath(filePath.toString());
        doc.setFileType(file.getContentType());
        doc.setContent(extractedText);
        doc.setUploadedBy(user);
        doc.setUploadedAt(LocalDateTime.now());
        doc.setTags(tags);

        // Save the document and return it
        return documentRepository.save(doc);
    }


    public Document updateDocument(Long documentId, String title, String description, MultipartFile file, List<String> tagNames) throws IOException {
        Document doc = documentRepository.findById(documentId).orElseThrow(() -> new IllegalArgumentException("Document with ID " + documentId + " not found."));

        if (title != null && !title.isBlank())
            doc.setTitle(title);

        if (description != null && !description.isBlank())
            doc.setDescription(description);

        if (file != null && !file.isEmpty()) {
            // Validate file type
            String fileType = file.getContentType();
            if (!ALLOWED_FILE_TYPES.contains(fileType)) {
                throw new IllegalArgumentException("Unsupported file type. Please upload a PDF, PNG, JPEG, or MP4.");
            }

            if (!Files.exists(Paths.get(uploadDir))) {
                Files.createDirectories(Paths.get(uploadDir));
            }

            // Delete old file
            String oldPath = doc.getFilePath();
            if (oldPath != null) {
                Path oldFilePath = Paths.get(oldPath);
                try {
                    Files.deleteIfExists(oldFilePath);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            // Save new file
            String originalFilename = file.getOriginalFilename();
            String sanitizedFilename = Paths.get(originalFilename).getFileName().toString();
            String uniqueFilename = UUID.randomUUID() + "_" + sanitizedFilename;
            Path newPath = Paths.get(uploadDir, uniqueFilename);
            Files.copy(file.getInputStream(), newPath, StandardCopyOption.REPLACE_EXISTING);

            doc.setFilePath(newPath.toString().replace("\\", "/"));
            doc.setFileType(fileType);

            // Extract text if applicable
            String extractedText = null;
            if (TEXT_BASED_FILE_TYPES.contains(fileType)) {
                try {
                    extractedText = fileTextExtractor.extractText(file);
                } catch (Exception ignored) {
                }
            }
            doc.setContent(extractedText);
        }

        if (tagNames != null) {
            Set<Tag> newTags = new HashSet<>();
            for (String tagName : tagNames) {
                Tag tag = tagRepository.findByNameIgnoreCase(tagName)
                        .orElseGet(() -> {
                            Tag newTag = new Tag(); // Use no-args constructor generated by Lombok
                            newTag.setName(tagName);
                            return tagRepository.save(newTag); // Save the new Tag to the repository
                        });
                newTags.add(tag);
            }
            doc.setTags(newTags);
        }

        return documentRepository.save(doc);
    }


    public List<Document> listDocuments() {
        return documentRepository.findAll();
    }

    public List<Document> filterDocumentsByTags(List<String> tagNames) {
        return documentRepository.findByTagNames(tagNames, tagNames.size());
    }

    public Document editDocumentTags(Long documentId, List<String> newTagNames) {
        Document doc = documentRepository.findById(documentId).orElseThrow();

        Set<Tag> newTags = new HashSet<>();
        for (String tagName : newTagNames) {
            Tag tag = tagRepository.findByNameIgnoreCase(tagName)
                    .orElseGet(() -> {
                        Tag newTag = new Tag(); // Use no-argument constructor generated by Lombok
                        newTag.setName(tagName); // Set the name using the setter
                        return tagRepository.save(newTag); // Save the new Tag to the repository
                    });
            newTags.add(tag);
        }

        doc.setTags(newTags);
        return documentRepository.save(doc);
    }

    public void deleteDocument(Long documentId) throws IOException {
        Document doc = documentRepository.findById(documentId).orElseThrow();
        Files.deleteIfExists(Paths.get(doc.getFilePath())); // delete the file
        documentRepository.delete(doc);
    }

    public String getDocumentContent(Long documentId) {
        Document document = documentRepository.findById(documentId)
                .orElseThrow(() -> new IllegalArgumentException("Document with ID " + documentId + " not found."));
        return document.getContent();
    }

    @Transactional
    public List<Document> searchDocuments(String keyword) {
        // First find documents by tags
        List<Document> byTag = documentRepository.findDistinctByTags_NameContainingIgnoreCase(keyword);

        // Then find documents by content
        List<Document> byContent = documentRepository.findByContentContaining(keyword);

        // Combine them into a set to remove duplicates
        Set<Document> combinedResults = new HashSet<>(byTag);
        combinedResults.addAll(byContent);

        return List.copyOf(combinedResults);
    }

    public byte[] downloadFileByDocumentId(Long documentId) throws IOException {
        Document doc = documentRepository.findById(documentId)
                .orElseThrow(() -> new IllegalArgumentException("Document with ID " + documentId + " not found."));

        // Get the file path from the document
        Path path = Paths.get(doc.getFilePath());

        // Ensure the file exists before attempting to read
        if (Files.notExists(path)) {
            throw new IOException("File not found at " + path.toString());
        }

        // Return the content of the file as byte array
        return Files.readAllBytes(path);
    }

    public Document getDocumentById(Long documentId) {
        return documentRepository.findById(documentId)
                .orElseThrow(() -> new IllegalArgumentException("Document with ID " + documentId + " not found."));
    }

    public List<Document> listDocumentsByUserId(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("User with ID " + userId + " not found."));

        // Fetch all documents uploaded by this user
        return documentRepository.findByUploadedBy(user);
    }
}
